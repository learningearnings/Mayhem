{"version":3,"sources":["pds-library/src/PdsAbstractInputWidget.ts"],"names":[],"mappings":"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","file":"PdsAbstractInputWidget.js","sourcesContent":["import {PdsWidget} from './PdsWidget';\nimport {pdsUtils} from './pdsUtils';\n\nexport abstract class PdsAbstractInputWidget extends PdsWidget {\n\n  name: string;\n\n  errorMessage: string = '';\n  hasHadError: boolean = false;\n  isValid: boolean = true;\n\n  //Validation rules\n  dataIsreadonly: boolean;\n  dataIsrequired: boolean;\n\n  //Validation Options\n  dataHideUnelevatedBadge: boolean;\n  dataDisableInvalidBadgeElevation: boolean;\n\n  //Visibility Flags\n  showBadge: boolean;\n  showTooltip: boolean = false;\n  showError: boolean = false;\n\n  //Text labels\n  dataLabelText: string;\n  dataBadgeText: string;\n  dataHelperText: string;\n  dataFieldHelpText: string;\n  dataPlaceholderText: string;\n  dataTooltipText: string;\n\n  originalBadgeText: string = '';\n\n  inputChange(): void {\n    this.validateWidget();\n    this.setValue(this.value);\n    (<any>this).dispatchEvent(new Event('modelValueChange'));\n  }\n\n  validateValueAfterMin(value, minValue, exclusive): boolean {\n    if (value != null && minValue != null) {\n      if (value < minValue) {\n        return false;\n      }\n      if (exclusive != null) {\n        if (value <= minValue) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  validateValueBeforeMax(value, maxValue, exclusive): boolean {\n    if (value != null && maxValue != null) {\n\n      if (value > maxValue) {\n        return false;\n      }\n      if (exclusive != null) {\n        if (value >= maxValue) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  setError(errorMsg): void {\n    if (errorMsg != null && errorMsg !== '') {\n      this.errorMessage = errorMsg;\n      this.setIsValid(false);\n    } else {\n      this.errorMessage = '';\n      this.setIsValid(true);\n    }\n  }\n\n  setIsValid(isValid): void {\n    this.isValid = isValid;\n  }\n\n  clearError(): void {\n    this.errorMessage = '';\n    this.setIsValid(true);\n  }\n\n  errorClass(hasHadError, errorMessage): string | undefined {\n    if (hasHadError && ((errorMessage != null && errorMessage !== '') || !this.isValid)) {\n      return 'error';\n    }\n  }\n\n  hasError(): boolean {\n    return !this.isValid || (this.errorMessage != null && this.errorMessage !== '');\n  }\n\n  focusLost(): void {\n    if (this.hasError()) {\n      this.hasHadError = true;\n    }\n  }\n\n  get value(): any {\n    let result = this.querySelector('input');\n    if (result != null) {\n      return result.value;\n    }\n  }\n\n  set value(value) {\n    this.setValue(value);\n  }\n\n  get modelValue(): any {\n    let result = this.querySelector('input');\n\n    if (result != null) {\n      return result.modelValue;\n    }\n  }\n\n  set modelValue(value) {\n    let modelValueChanged = this.setModelValue(value);\n    if (modelValueChanged) {\n      this.validateWidget();\n    }\n  }\n\n  abstract setValue(value: any, skip?: boolean): void;\n\n  abstract setModelValue(value: any, skip?: boolean): void;\n\n  abstract validateWidget(): boolean;\n\n  attached(): void {\n    let valueAttr = (<any>this).getAttribute('value');\n    if (valueAttr != null) {\n      this.value = valueAttr;\n      (<any>this).removeAttribute('value');\n    }\n  }\n\n  /**\n   * Helper function to dynamically add visibility classes to the badge element.\n   */\n  getBadgeClasses(dataHideUnelevatedBadge: boolean, dataBadgeText: string): string {\n    this.setShowBadge(dataHideUnelevatedBadge, dataBadgeText);\n    let showTheBadge = this.showBadge;\n    let classes = 'pds-field-badge';\n    if (!showTheBadge) {\n      classes += ' pds-is-hidden';\n    }\n    return classes;\n  }\n\n  setShowBadge(dataHideUnelevatedBadge: boolean, dataBadgeText: string): void {\n    this.showBadge = (!dataHideUnelevatedBadge && dataBadgeText != null && dataBadgeText.length > 0);\n  }\n\n  /**\n   * Sets the flag used to determine if the error message should be displayed.\n   * This checks both hasHadError and if errorMessage is populated because\n   * when required has an invalid state, we are showing the badge near the label instead\n   * of an error below the input. We want to keep the error message element hidden in that case.\n   */\n  setShowErrorMessage(): void {\n    this.showError = this.hasHadError && this.errorMessage !== '';\n  }\n\n  setRequired(): void {\n    if (this.dataIsrequired != null) {\n      let outerDiv = this.querySelector('div.pds-input-text');\n      if (this.dataIsrequired) {\n        this.querySelector('input').setAttribute('required', 'required');\n        pdsUtils.addClass(outerDiv, 'pds-is-required');\n        // Check if the actual badge text attribute exists.\n        // Because of the way the control initializes, this.dataBadgeText\n        // could be null while there is actually a value defined for the attribute.\n        if (!outerDiv.parentElement.hasAttribute('data-badge-text')) {\n          this.dataBadgeText = this.pds.i18n.getText(this.pds.i18n.widgetKeys['textWidget.required']);\n        }\n      } else {\n        this.querySelector('input').removeAttribute('required', 'required');\n        pdsUtils.removeClass(outerDiv, 'pds-is-required');\n        if (this.originalBadgeText != null && this.originalBadgeText !== '') {\n          this.dataBadgeText = this.originalBadgeText;\n        }\n\n        if (this.getBadgeClasses != null) {\n          pdsUtils.addClass(this.querySelector('.pds-field-badge'), this.getBadgeClasses(this.dataHideUnelevatedBadge, this.dataBadgeText));\n        }\n      }\n    }\n  }\n\n  setReadonly(): void {\n    if (this.dataIsreadonly != null && this.value != null) {\n      let outerDiv = this.querySelector('div.pds-input-text');\n      if (this.dataIsreadonly || this.dataIsreadonly.toString().toLowerCase() !== 'false') {\n        pdsUtils.addClass(outerDiv, 'pds-is-readonly');\n        this.querySelector('.pds-readonly-data').innerText = this.value;\n      } else {\n        pdsUtils.removeClass(outerDiv, 'pds-is-readonly');\n        this.querySelector('.pds-readonly-data').innerText = '';\n      }\n    }\n  }\n\n  showLabel(dataLabelText: string): boolean {\n    return (dataLabelText != null && dataLabelText.length > 0);\n  }\n\n  showFieldHelp(dataFieldHelpText: string): boolean {\n    return (this.dataTooltipText != null && this.dataTooltipText.length > 0);\n  }\n\n  showHelperText(dataHelperText: string): boolean {\n    return (this.dataHelperText != null && this.dataHelperText.length > 0);\n  }\n\n  toggleFieldBadge(fieldBadge: HTMLElement, showBadge: boolean, isElevated?: boolean): void {\n    if (showBadge) {\n      pdsUtils.removeClass(fieldBadge, 'pds-is-hidden');\n    } else {\n      pdsUtils.addClass(fieldBadge, 'pds-is-hidden');\n    }\n\n    if (isElevated != null) {\n      this.elevateFieldBadge(fieldBadge, isElevated);\n    }\n  }\n\n  elevateFieldBadge(fieldBadge: HTMLElement, isElevated: boolean): void {\n    if (isElevated) {\n      pdsUtils.addClass(fieldBadge, 'pds-is-elevated');\n    } else {\n      pdsUtils.removeClass(fieldBadge, 'pds-is-elevated');\n    }\n  }\n\n}\n"]}