{"version":3,"sources":["pds-library/src/PdsTextWidget.ts"],"names":[],"mappings":"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","file":"PdsTextWidget.js","sourcesContent":["//NOTE: This widget's definition is included in powerSchoolDesignSystemToolkit.ts\nimport {PdsAbstractInputWidget} from './PdsAbstractInputWidget';\nimport {pdsUtils} from './pdsUtils';\n\nexport class PdsTextWidget extends PdsAbstractInputWidget {\n  is = 'pds-text-widget';\n\n  //Text Labels\n\n  dataRegexErrorText: string;\n\n  //Options\n  dataInputType: string;\n\n  //Validation Rules\n  dataRegex: string;\n  dataMinlength: string;\n  dataMaxlength: string;\n  dataExcludechars: string;\n\n  //Used to cache the regex so we don't keep re-creating it.\n  validationRegex: RegExp;\n\n  dataAdditionalInputAttributes: Object;\n  dataAdditionalErrorAttributes: Object;\n\n  properties = {\n    name: String,\n    dataLabelText: String,\n    dataBadgeText: String,\n    dataHelperText: String,\n    dataRegexErrorText: String,\n    dataFieldHelpText: String,\n    dataPlaceholderText: String,\n    dataTooltipText: String,\n    dataInputType: {\n      type: String,\n      value: 'text'\n    },\n    dataRegex: {\n      type: String,\n      observer: 'setValidationRegex',\n      notify: true\n    },\n    dataMinlength: String,\n    dataMaxlength: String,\n    dataExcludechars: String,\n    dataIsrequired: {\n      type: Boolean,\n      value: false,\n      observer: 'setRequired',\n      notify: true\n    },\n    dataIsreadonly: {\n      type: Boolean,\n      value: false,\n      observer: 'setReadonly',\n      notify: true\n    },\n    hasHadError: {\n      value: false,\n      observer: 'setShowErrorMessage'\n    },\n    dataAdditionalInputAttributes: Object,\n    dataAdditionalErrorAttributes: Object,\n    dataHideUnelevatedBadge: {\n      type: Boolean,\n      value: false\n    },\n    dataDisableInvalidBadgeElevation: {\n      type: Boolean,\n      value: false\n    }\n  };\n\n  messageKeysUpdated(): void {\n  }\n\n  /**\n   * Initialize the widget's default values, visibility flags, and css styles.\n   */\n  attached(): void {\n    super.attached();\n\n    //Initialize the readonly style.\n    this.setReadonly();\n\n    // Initialize the required style.\n    this.setRequired();\n\n    // We need to store this for later incase we need to reset it.\n    this.setOriginalBadgeText();\n\n    // Initialize the visible state of the badge.\n    this.setShowBadge(this.dataHideUnelevatedBadge, this.dataBadgeText);\n\n    // Create and cache the regex object to be used later during validation.\n    this.setValidationRegex(false);\n  }\n\n  ready(): void {\n    // Some validation frameworks require special attributes to define validation types and messages.\n    this.setAdditionalInputAttributes();\n\n    this.setAdditionalErrorAttributes();\n  }\n\n  setAdditionalInputAttributes(): void {\n    if (this.dataAdditionalInputAttributes != null) {\n      let inputElement = this.querySelector('input');\n      for (let key in this.dataAdditionalInputAttributes) {\n        if (this.dataAdditionalInputAttributes.hasOwnProperty(key)) {\n          inputElement.setAttribute(key, this.dataAdditionalInputAttributes[key]);\n        }\n      }\n    }\n  }\n\n  setAdditionalErrorAttributes(): void {\n    if (this.dataAdditionalErrorAttributes != null) {\n      let errorElement = this.querySelector('.pds-validation');\n      for (let key in this.dataAdditionalErrorAttributes) {\n        if (this.dataAdditionalErrorAttributes.hasOwnProperty(key)) {\n          errorElement.setAttribute(key, this.dataAdditionalErrorAttributes[key]);\n        }\n      }\n    }\n  }\n\n  showLabel(dataLabelText: string): boolean {\n    return (dataLabelText != null && dataLabelText.length > 0);\n  }\n\n  setOriginalBadgeText(): void {\n    if (this.dataBadgeText != null) {\n      this.originalBadgeText = this.dataBadgeText;\n    }\n  }\n\n  /**\n   *\n   * @param value - The string the user typed into the input.\n   * @param skip - skips setting the model value. (Keeps from getting into recursive loops)\n   */\n  setValue(value: string, skip = false): void {\n    if (value == null) {\n      value = '';\n    }\n\n    let inputEl = this.querySelector('input');\n    if (inputEl != null && value !== inputEl.value) {\n      inputEl.value = value;\n    }\n\n    if (skip !== true) {\n      this.setModelValue(value, true);\n    }\n  }\n\n  /**\n   * @param modelValue\n   * @param skip\n   * @returns returns if the model value was actually set.\n   */\n  setModelValue(modelValue: string, skip: boolean): boolean {\n    let ele = this.querySelector('input');\n    if (ele != null && modelValue !== ele.modelValue) {\n      ele.modelValue = modelValue;\n      if (skip !== true) {\n        this.setValue(modelValue, true);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  validateWidget(): boolean {\n    let inputIsValid = true;\n    let textToValidate = this.value;\n    let fieldBadge = this.querySelector('.pds-field-badge');\n\n    inputIsValid = this.validateIsRequired(inputIsValid, this.dataIsrequired, textToValidate, fieldBadge, this.dataDisableInvalidBadgeElevation);\n\n    if (this.value != null && this.value !== '') {\n      inputIsValid = this.validateMinLength(inputIsValid, this.dataMinlength, textToValidate);\n      inputIsValid = this.validateMaxLength(inputIsValid, this.dataMaxlength, textToValidate);\n      inputIsValid = this.validateRegex(inputIsValid, this.validationRegex, textToValidate, this.dataRegexErrorText);\n    }\n\n    this.setIsValid(inputIsValid);\n\n    if (inputIsValid) {\n      this.clearError();\n    }\n\n    return inputIsValid;\n  }\n\n  validateIsRequired(isValid: boolean, isRequired: boolean, inputText: string, fieldBadge: HTMLElement, disableInvalidBadgeElevation: boolean): boolean {\n    if (isValid && isRequired) {\n      if (inputText == null || inputText === '') {\n        this.toggleFieldBadge(fieldBadge, true, !disableInvalidBadgeElevation);\n        isValid = false;\n        this.setIsValid(isValid);\n      } else {\n        this.toggleFieldBadge(fieldBadge, !this.dataHideUnelevatedBadge, false);\n      }\n    }\n    return isValid;\n  }\n\n  validateMinLength(isValid: boolean, minLength: string, inputText: string): boolean {\n    if (isValid) {\n      let checkMinLength = minLength != null;\n      if (checkMinLength) {\n        let passedMinLength = inputText.length >= parseInt(minLength);\n        if (!passedMinLength) {\n          let errorMsg = this.pds.i18n.getText(this.pds.i18n.widgetKeys['textWidget.failedMinlength'], minLength);\n          this.setError(errorMsg);\n          isValid = false;\n        }\n      }\n    }\n    return isValid;\n  }\n\n  validateMaxLength(isValid: boolean, maxLength: string, inputText: string): boolean {\n    if (isValid) {\n      let checkMaxLength = maxLength != null;\n      if (checkMaxLength) {\n        let passedMaxLength = inputText.length <= parseInt(maxLength);\n        if (!passedMaxLength) {\n          let errorMsg = this.pds.i18n.getText(this.pds.i18n.widgetKeys['textWidget.failedMaxlength'], maxLength);\n          this.setError(errorMsg);\n          isValid = false;\n        }\n      }\n    }\n    return isValid;\n  }\n\n  validateRegex(isValid: boolean, regex: RegExp, inputText: string, regexErrorMessage: string): boolean {\n    if (isValid) {\n      let checkRegex = regex != null;\n      if (checkRegex) {\n        if (!regex.test(inputText)) {\n          let errorMsg = '';\n          if (regexErrorMessage != null) {\n            errorMsg = regexErrorMessage;\n          } else {\n            errorMsg = this.pds.i18n.getText(this.pds.i18n.widgetKeys['textWidget.failedRegex']);\n          }\n          this.setError(errorMsg);\n          isValid = false;\n        }\n      }\n    }\n    return isValid;\n  }\n\n  /**\n   * Creates a RegExp object and caches it for reuse. This function is called\n   * by the this.dataRegex observer to reset the cached value whenever the\n   * dataRegex attribute is changed.\n   *\n   * @param validate - Used to skip validation after changing the regex.\n   */\n  setValidationRegex(validate = true): void {\n    if (this.dataRegex != null && this.dataRegex.length > 0) {\n      this.validationRegex = new RegExp(this.dataRegex);\n    } else {\n      this.validationRegex = new RegExp('');\n    }\n    if (validate) {\n      this.validateWidget();\n    }\n  }\n\n  /**\n   * Handles the keypress event for the input.\n   * Primarly used to honor dataExcludedChars property.\n   *\n   * @param event\n   * @param detail\n   * @param sender\n   */\n   //TODO ask Sam if this is Ok behavior.\n  handleKeypress(event, detail, sender): boolean {\n    if (this.dataExcludechars != null && this.dataExcludechars.length > 0) {\n      let enteredCharacter = String.fromCharCode(event.keyCode);\n      if (this.isExcludedCharacter(enteredCharacter, this.dataExcludechars)) {\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Used to determine if a given character is in the excludedCharacters collection.\n   *\n   * @param enteredCharacter - The character to test with.\n   * @param excludedCharacters - The string of characters to check against.\n   */\n  isExcludedCharacter(enteredCharacter: string, excludedCharacters: string): boolean {\n    for (let i = 0; i < excludedCharacters.length; i++) {\n      if (enteredCharacter === excludedCharacters[i]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  toggleTooltip(): void {\n    //TODO - The tooltip functionality is to be done in it's own component.\n    return;\n  }\n}\n"]}