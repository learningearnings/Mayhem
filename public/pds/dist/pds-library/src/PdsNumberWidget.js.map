{"version":3,"sources":["pds-library/src/PdsNumberWidget.ts"],"names":[],"mappings":"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","file":"PdsNumberWidget.js","sourcesContent":["import {PdsAbstractInputWidget} from './PdsAbstractInputWidget';\nlet isIntegerRegex = /^([-]?[0-9]*)?$/;\n\nexport class PdsNumberWidget extends PdsAbstractInputWidget {\n  is = 'pds-number-widget';\n\n  dataIsinteger: string;\n  dataMinlength: string;\n  dataMaxlength: string;\n  dataMaxvalue: string;\n  dataMinvalue: string;\n  dataMaxdecimals: string;\n  dataMinvalue_exclusive: string;\n  dataMaxvalue_exclusive: string;\n\n  properties = {\n    dataIsinteger: String,\n    dataMinlength: String,\n    dataMaxlength: String,\n    dataMaxvalue: String, //reads property data-maxvalue\n    dataMinvalue: String,  //reads property data-minvalue\n    dataMaxdecimals: String,\n    dataMinvalue_exclusive: String,\n    dataMaxvalue_exclusive: String,\n    hasHadError: {\n      value: false\n    },\n    name: String  //we construct the input id using this name.\n  };\n\n  // left commented out to help remember the life cycle hooks\n  //\n  // created() {\n  //   //this might be useful too.\n  // };\n  //\n  // attached() {\n  //   console.log('pdsNumWidget Attached!');\n  // };\n\n  messageKeysUpdated(): void {\n\n  }\n\n  /**\n   *\n   * @param value - The string the user typed into the input.\n   * @param skip - skips setting the model value. (Keeps from getting into recursive loops)\n   */\n  setValue(value: string, skip = false): void {\n    if (value == null) {\n      value = '';\n    }\n\n    let inputEl = this.querySelector('input');\n    if (inputEl != null && value !== inputEl.value) {\n      inputEl.value = value;\n    }\n\n    if (skip !== true) {\n      this.setModelValue(this.pds.i18n.deLocalizeNumber(value), true);\n    }\n  };\n\n  /**\n   * @param modelValue\n   * @param skip\n   * @returns returns if the model value was actually set.\n   */\n  setModelValue(modelValue: number, skip: boolean): boolean {\n    //TODO - Figure out how to tell typescript that I can access querySelector off of this.\n    let ele = this.querySelector('input');\n    if (ele != null && modelValue !== ele.modelValue) {\n      ele.modelValue = modelValue;\n      if (skip !== true) {\n        this.setValue(this.pds.i18n.localizeNumber(modelValue), true);\n      }\n      return true;\n    }\n    return false;\n  };\n\n  isValidNumber(): boolean {\n    return this.pds.i18n.isValidNumber(this.value);\n  };\n\n  validateIsInteger(): boolean {\n    return isIntegerRegex.test(this.value);\n  };\n\n  validateWidget(): boolean {\n    //numberPreValidate(jquerySelector);\n    let inputIsValid = true;\n\n    if (this.value == null || this.value === '') {\n      //TODO - make this thing handle the required rule.\n      //short-circuit validation when value is empty\n//                    if (jquerySelector.hasClass('required')) {\n//                        //we only care about empty values when the field is required\n//                        return psRequired.validateRequired(jquerySelector); //handles clearing errors if necessary\n//                    }\n    } else { //if not empty - do the interesting number validations\n      inputIsValid = this.isValidNumber();\n      if (inputIsValid) {\n        //Gets the modelValue set in the input.\n        this.setValue(this.value);\n        //check if isInteger and validate\n        let isInteger = (this.dataIsinteger === 'true');\n        let passedIntCheck = this.validateIsInteger();\n        if (isInteger && !passedIntCheck) {\n          let errorMsg = this.pds.i18n.getText(this.pds.i18n.widgetKeys['numWidget.notAnInteger']);\n          this.setError(errorMsg);\n          inputIsValid = false;\n        }\n\n        //check minlength and validate\n        let checkMinLength = this.dataMinlength != null;\n        if (checkMinLength) {\n          let passedMinLength = this.value.length >= parseInt(this.dataMinlength);\n          if (!passedMinLength) {\n            let errorMsg = this.pds.i18n.getText(this.pds.i18n.widgetKeys['numWidget.failedMinlength'], this.dataMinlength);\n            this.setError(errorMsg);\n            inputIsValid = false;\n          }\n        }\n\n        //check maxlength and validate\n        let checkMaxLength = this.dataMaxlength != null;\n        if (checkMaxLength) {\n          let passedMaxLength = this.value.length <= parseInt(this.dataMaxlength);\n          if (!passedMaxLength) {\n            let errorMsg = this.pds.i18n.getText(this.pds.i18n.widgetKeys['numWidget.failedMaxlength'], this.dataMaxlength);\n            this.setError(errorMsg);\n            inputIsValid = false;\n          }\n        }\n\n        let value = this.modelValue; //a delocalized value. This should be a number, or null.\n        //so far so good, check the range\n        let minValue = this.dataMinvalue;\n        let passedMin = true;\n        let passedMax = true;\n        if (minValue != null) {\n          let exclusiveMin = this.dataMinvalue_exclusive;\n          passedMin = this.validateValueAfterMin(value, parseFloat(minValue), exclusiveMin);\n          if (!passedMin) {\n            let errorMsg;\n            if (exclusiveMin == null) {\n              errorMsg = this.pds.i18n.getText(this.pds.i18n.widgetKeys['numWidget.failedMinValue'], this.pds.i18n.localizeNumber(minValue));\n            } else {\n              errorMsg = this.pds.i18n.getText(this.pds.i18n.widgetKeys['numWidget.failedMinValueExclusive'], this.pds.i18n.localizeNumber(minValue));\n            }\n\n            this.setError(errorMsg);\n            inputIsValid = false;\n          }\n        }\n        let maxValue = this.dataMaxvalue;\n        if (passedMin) {\n          if (maxValue != null) {\n            let exclusiveMax = this.dataMaxvalue_exclusive;\n            if (!this.validateValueBeforeMax(value, parseFloat(maxValue), exclusiveMax)) {\n              let errorMsg;\n              if (exclusiveMax == null) {\n                errorMsg = this.pds.i18n.getText(this.pds.i18n.widgetKeys['numWidget.failedMaxValue'], this.pds.i18n.localizeNumber(maxValue));\n              } else {\n                errorMsg = this.pds.i18n.getText(this.pds.i18n.widgetKeys['numWidget.failedMinValueExclusive'], this.pds.i18n.localizeNumber(maxValue));\n              }\n\n              this.setError(errorMsg);\n              inputIsValid = false;\n            }\n          }\n        }\n\n        //check maxdecimals and validate\n        let checkMaxDecimals = this.dataMaxdecimals != null;\n        if (inputIsValid && checkMaxDecimals) {\n          let passedMaxDecimals = this.validateMaxDecimals(this.value);\n          if (!passedMaxDecimals) {\n            let errorMsg = this.pds.i18n.getText(this.pds.i18n.widgetKeys['numWidget.failedMaxdecimals'], this.dataMaxdecimals);\n            this.setError(errorMsg);\n            inputIsValid = false;\n          }\n        }\n      } else {\n        let errorMsg = this.pds.i18n.getText(this.pds.i18n.widgetKeys['numWidget.invalidNumber']);\n        this.setError(errorMsg);\n      }\n    }\n    //else its not required and empty - no checks needed\n    if (inputIsValid) {\n      this.clearError();\n      //TODO - special validation functions need to be registered with the powerSchoolDesignSystemToolkit library.\n      //inputIsValid = psSpecial.validateSpecial(jquerySelector);\n    }\n    return inputIsValid;\n  };\n\n  validateMaxDecimals(value): boolean {\n    if (value == null) {\n      value = this.modelValue;\n    } else {\n      value = this.pds.i18n.deLocalizeNumber(value);\n    }\n    let maxDecimals = parseInt(this.dataMaxdecimals);\n    return (this.countDecimals(value) <= maxDecimals);\n  }\n\n  //determine the number of decimal places used in a delocalized number value\n  countDecimals(value): number {\n    if ((value % 1) === 0) {\n      //integer\n      return 0;\n    }\n    return value.toString().split('.')[1].length;\n  };\n}\n"]}