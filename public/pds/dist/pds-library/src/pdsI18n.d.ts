export declare let pdsI18n: {
    setLocaleAndWidgetKeys: (locale: any, widgetKeys?: any) => void;
    isUpdatedMessageKeys: boolean;
    twoDigitRegex: RegExp;
    pds: undefined;
    messageKeys: {};
    widgetKeys: {
        'numWidget.tooLarge': string;
        'numWidget.notAnInteger': string;
        'numWidget.invalidNumber': string;
        'numWidget.failedMinlength': string;
        'numWidget.failedMaxdecimals': string;
        'numWidget.failedMinValue': string;
        'numWidget.failedMaxValue': string;
        'numWidget.failedMinValueExclusive': string;
        'numWidget.failedMaxValueExclusive': string;
        'dateWidget.invalidDate': string;
        'dateWidget.failedMinDate': string;
        'dateWidget.failedMaxDate': string;
        'dateWidget.failedMinDateExclusive': string;
        'dateWidget.failedMaxDateExclusive': string;
        'dateWidget.open_picker_dialog': string;
        'textWidget.failedMinlength': string;
        'textWidget.failedMaxlength': string;
        'textWidget.failedRegex': string;
        'textWidget.required': string;
    };
    locale: {
        'LOCALE': string;
        'DATETIME_FORMATS': {
            'MONTH': string[];
            'SHORTMONTH': string[];
            'medium': string;
            'mediumDateText': string;
            'shortDateText': string;
            'AMPMS': string[];
            'mediumDate': string;
            'mediumTime': string;
            'shortTime': string;
            'short': string;
            'SHORTDAY': string[];
            'DAY': string[];
            'shortDate': string;
        };
        '$BREACH_MITIGATION': string;
        'NUMBER_FORMATS': {
            'DECIMAL_SEP': string;
            'number_regex': string;
            'CURRENCY_SYM': string;
            'GROUP_SEP': string;
            'PATTERNS': {
                'negSuf': string;
                'posSuf': string;
                'lgSize': string;
                'minFrac': number;
                'minInt': number;
                'negPre': string;
                'gSize': number;
                'maxFrac': number;
                'macFrac': string;
                'posPre': string;
            }[];
            'number_format': string;
        };
    };
    overWriteGetText(getTextOverwriteFunction: any): void;
    getShortFormat: () => void;
    getDateFormat: () => void;
    getDateText: () => string;
    getText(key: string, params: string | string[]): string | undefined;
    localizeDate: (d: Date, fmt?: any) => string;
    deLocalizeDate: (localizedDateString: string) => Date | undefined;
    isValidDateObject: (d: Date) => boolean;
    isValidDate: (localizedDate: string) => boolean;
    parseJsonDate: (psJsonDateString: string, preserveTimeOfDay?: boolean | undefined) => Date | undefined;
    getJsonDate: (javascriptDateObject: Date, preserveTimeOfDay?: boolean | undefined) => string | undefined;
    parseJsonDateToNonLocalized: (psJsonDateString: string) => string;
    getMmDdYyyyDateString(date: Date): string;
    addDaysToDate: (date: any, numDays: any) => Date;
    getLocalizedDayOfWeek: (date: any) => string;
    getNumericFormat: () => {
        format: string;
        size: string;
        gs: string;
        ds: string;
        regex: string;
    };
    localizeNumber: (number: number, decimalPlaces: any) => string | undefined;
    deLocalizeNumber: (number: string) => number;
    deLocalizeNumberToString: (number: string) => string | undefined;
    removeNumberFormat: (format: any, number: any) => number | undefined;
    isValidNumber: (numValue: string) => boolean;
    localizeNumericObject: (object: Object, key: string) => void;
    deLocalizeNumericObject: (object: Object, key: string) => void;
    makeStrFromTime: (time: Date) => string;
};
