{"version":3,"sources":["pds-library/src/pdsValidation.ts"],"names":[],"mappings":";AACW,qBAAa,GAAG;IACzB,GAAG,EAAE,SAAS;IASd,gBAAgB,EAAE,UAAU,OAAoB;QAC9C,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QAED,IAAI,mBAAmB,GAAG,IAAI,CAAC;QAE/B,IAAI,YAAY,GAAG,OAAO,CAAC,gBAAgB,CAAC,mDAAmD,CAAC,CAAC;QACjG,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAG7C,mBAAmB,GAAS,YAAY,CAAC,CAAC,CAAE,CAAC,cAAc,EAAE,IAAI,mBAAmB,CAAC;QACvF,CAAC;QAED,MAAM,CAAC,mBAAmB,CAAC;IAC7B,CAAC;CACF,CAAC","file":"pdsValidation.js","sourcesContent":["import {PdsAbstractInputWidget} from './PdsAbstractInputWidget';\nexport let pdsValidation = {\n  pds: undefined,\n  /**\n   * Searches the DOM element for all descendants that are widgets that can be validated\n   * and runs their validation functions which will put any error messages up on the screen\n   * as well as return whether all elements are valid within the container or not.\n   * @param element: a DOM element\n   * @returns true if all the elements are valid\n   *          false if one or more elements are NOT valid\n   */\n  validateElements: function (element: HTMLElement): boolean {\n    if (element == null) {\n      return true;\n    }\n\n    let allElementsAreValid = true;\n\n    let inputWidgets = element.querySelectorAll('pds-number-widget,pds-date-widget,pds-text-widget');\n    for (let i = 0; i < inputWidgets.length; i++) {\n      //It's important that the AND allElementsAreValid is tested AFTER numWidgets[i].validateNumber\n      //so ALL elements will be validated.\n      allElementsAreValid = (<any>inputWidgets[i]).validateWidget() && allElementsAreValid;\n    }\n\n    return allElementsAreValid;\n  }\n};\n"]}