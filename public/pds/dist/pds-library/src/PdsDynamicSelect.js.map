{"version":3,"sources":["pds-library/src/PdsDynamicSelect.ts"],"names":[],"mappings":";AAAA;IAAA;QACE,OAAE,GAAG,oBAAoB,CAAC;QAC1B,YAAO,GAAG,QAAQ,CAAC;QAEnB,eAAU,GAAG;YACX,cAAc,EAAE;gBACd,QAAQ,EAAE,gBAAgB;aAC3B;YACD,YAAY,EAAE,EAAE;SACjB,CAAC;QAGF,mBAAc,GAAsC,EAAE,CAAC;QAGvD,gBAAW,GAAY,KAAK,CAAC;IA6B/B,CAAC;IA3BC,yCAAc,GAAd;QACE,IAAI,SAAS,CAAC;QACd,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACrB,SAAS,GAAS,IAAK,CAAC,KAAK,CAAC;QAChC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC;YAC9B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAC1B,CAAC;QACD,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC;YACtB,SAAS,GAAS,IAAK,CAAC,KAAK,CAAC;QAChC,CAAC;QAEK,IAAK,CAAC,SAAS,GAAG,EAAE,CAAC;QAC3B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACpD,IAAI,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YACpC,IAAI,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACjD,SAAS,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;YAC/B,SAAS,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC;YAElC,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;gBAC/B,SAAS,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;YACzC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,SAAS,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;YACxC,CAAC;YACK,IAAK,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;IACH,uBAAC;AAAD,CA5CA,AA4CC,IAAA;AA5CY,wBAAgB,mBA4C5B,CAAA","file":"PdsDynamicSelect.js","sourcesContent":["export class PdsDynamicSelect {\n  is = 'pds-dynamic-select';\n  extends = 'select';\n\n  properties = {\n    dynamicOptions: {\n      observer: 'optionsUpdated'\n    },\n    defaultValue: {}\n  };\n\n  //Array of option tags that are going to be there.\n  dynamicOptions: Array<{value: any, text: string}> = [];\n\n  defaultValue: any;\n  defaultUsed: boolean = false;\n\n  optionsUpdated(): void {\n    let testValue;\n    if (this.defaultUsed) {\n      testValue = (<any>this).value;\n    } else {\n      testValue = this.defaultValue;\n      this.defaultUsed = true;\n    }\n    if (testValue == null) {\n      testValue = (<any>this).value;\n    }\n\n    (<any>this).innerHTML = ''; //clear the previous children.\n    for (let i = 0; i < this.dynamicOptions.length; i++) {\n      let option = this.dynamicOptions[i];\n      let optionEle = document.createElement('option');\n      optionEle.value = option.value;\n      optionEle.innerText = option.text;\n\n      if (option.value === testValue) {\n        optionEle.setAttribute('selected', '');\n      } else {\n        optionEle.removeAttribute('selected');\n      }\n      (<any>this).appendChild(optionEle);\n    }\n  }\n}\n"]}