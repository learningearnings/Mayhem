{"version":3,"sources":["pds-library/src/pdsLogger.ts"],"names":[],"mappings":";AAAW,iBAAS,GAAG;IACrB,eAAe,EAAE,UAAU,UAAkB,EAAE,YAAqB;QAClE,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,YAAY,CAAC;IAC/C,CAAC;IAED,YAAY,EAAE,EAAE;IAChB,cAAc,EAAE,UAAU,YAAoB;QAE5C,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;YACnC,IAAI,cAAc,GAAG,UAAU,GAAQ;gBAAE,gBAAqB;qBAArB,WAAqB,CAArB,sBAAqB,CAArB,IAAqB;oBAArB,+BAAqB;;gBAC5D,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;oBACpC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;gBACxC,CAAC;YACH,CAAC,CAAC;YACF,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEnD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBACpD,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;YAC1C,CAAC;QACH,CAAC;IACH,CAAC;IACD,GAAG,EAAE,UAAU,GAAQ;QAAE,gBAAqB;aAArB,WAAqB,CAArB,sBAAqB,CAArB,IAAqB;YAArB,+BAAqB;;QAC5C,EAAE,CAAC,CAAO,IAAI,CAAC,YAAa,CAAC,GAAG,CAAC,CAAC,CAAC;YACjC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QACxC,CAAC;IACH,CAAC;CACF,CAAC","file":"pdsLogger.js","sourcesContent":["export let pdsLogger = {\n  setLoggerStatus: function (loggerName: string, showMessages: boolean): void {\n    this.loggerStatus[loggerName] = showMessages;\n  },\n  //Key: the logger name. Value: true if logs will show up, false if they will not show up.\n  loggerStatus: {},\n  requiresLogger: function (functionName: string): void {\n    //only register things that are here.\n    if (this.log[functionName] == null) {\n      let loggerFunction = function (msg: any, ...params: Array<any>): void {\n        if (this.loggerStatus[functionName]) {\n          console.log.apply(console, arguments);\n        }\n      };\n      this.log[functionName] = loggerFunction.bind(this);\n      //We only want to turn it off if someone has not said they want it.\n      if (!this.loggerStatus.hasOwnProperty(functionName)) {\n        this.loggerStatus[functionName] = false;\n      }\n    }\n  },\n  log: function (msg: any, ...params: Array<any>): void {\n    if ((<any>this.loggerStatus).log) {\n      console.log.apply(console, arguments);\n    }\n  }\n};\n"]}