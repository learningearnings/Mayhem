import { PdsWidget } from './PdsWidget';
export declare abstract class PdsAbstractInputWidget extends PdsWidget {
    name: string;
    errorMessage: string;
    hasHadError: boolean;
    isValid: boolean;
    dataIsreadonly: boolean;
    dataIsrequired: boolean;
    dataHideUnelevatedBadge: boolean;
    dataDisableInvalidBadgeElevation: boolean;
    showBadge: boolean;
    showTooltip: boolean;
    showError: boolean;
    dataLabelText: string;
    dataBadgeText: string;
    dataHelperText: string;
    dataFieldHelpText: string;
    dataPlaceholderText: string;
    dataTooltipText: string;
    originalBadgeText: string;
    inputChange(): void;
    validateValueAfterMin(value: any, minValue: any, exclusive: any): boolean;
    validateValueBeforeMax(value: any, maxValue: any, exclusive: any): boolean;
    setError(errorMsg: any): void;
    setIsValid(isValid: any): void;
    clearError(): void;
    errorClass(hasHadError: any, errorMessage: any): string | undefined;
    hasError(): boolean;
    focusLost(): void;
    value: any;
    modelValue: any;
    abstract setValue(value: any, skip?: boolean): void;
    abstract setModelValue(value: any, skip?: boolean): void;
    abstract validateWidget(): boolean;
    attached(): void;
    getBadgeClasses(dataHideUnelevatedBadge: boolean, dataBadgeText: string): string;
    setShowBadge(dataHideUnelevatedBadge: boolean, dataBadgeText: string): void;
    setShowErrorMessage(): void;
    setRequired(): void;
    setReadonly(): void;
    showLabel(dataLabelText: string): boolean;
    showFieldHelp(dataFieldHelpText: string): boolean;
    showHelperText(dataHelperText: string): boolean;
    toggleFieldBadge(fieldBadge: HTMLElement, showBadge: boolean, isElevated?: boolean): void;
    elevateFieldBadge(fieldBadge: HTMLElement, isElevated: boolean): void;
}
