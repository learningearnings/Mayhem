{"version":3,"sources":["pds-library/src/PdsNaturalSort.ts"],"names":[],"mappings":"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","file":"PdsNaturalSort.js","sourcesContent":["/**\n * Checks the specified value to determine if it is not undefined or null and also not blank (when trimmed).\n * @param value The value to be checked\n * @return true if the specified value is not undefined or null, and also not blank (or just whitespace); otherwise false.\n *\n * The formula used to evaluate each variable type is:\n * <li>{null}      - always returns false</li>\n * <li>{undefined} - always returns false</li>\n * <li>NaN         - always returns false</li>\n * <li>Arguments   - true if value.length > 0</li>\n * <li>Array       - true if value.length > 0</li>\n * <li>Element     - passes Element.value back into this method</li>\n * <li>Boolean     - always returns true</li>\n * <li>Date        - always returns true</li>\n * <li>Function    - always returns true</li>\n * <li>Infinity    - always returns true</li>\n * <li>Object      - always returns true</li>\n * <li>Number      - always returns true</li>\n * <li>RegExp      - always returns true</li>\n * <li>String      - true if value.trim().length > 0</li>\n * <li>{unknown}   - always returns false</li>\n */\nlet hasValue = function (value: any): boolean {\n\n  //undefined, null\n  if (value == null) {\n    return false;\n  }\n\n  if (typeof value === 'number') {\n    //NaN\n    if (isNaN(value)) {\n      return false;\n    }\n\n    //If it's infinite, it registers as a number so no need to\n    //do a special test for !isFinite()\n    return true;\n  }\n\n  //string\n  if (typeof value === 'string') {\n    //This covers strings that are numbers as well.\n    return value.trim().length > 0;\n  }\n\n  //boolean\n  if (value === true || value === false) {\n    return true;\n  }\n\n  if (typeof value === 'function') {\n    return true;\n  }\n\n  if (typeof value === 'object') {\n    //Array\n    if ('length' in value) {\n      return value.length > 0;\n    }\n\n    if (value instanceof HTMLElement) {\n      return hasValue((<any>value).value);\n    }\n\n    //takes care of Date or RegExp obj as well\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Compares two values using a recursive natural order (default is ascending order).  Options are available for descending order, ignoring the letter case and using a custom alphabet.\n *\n * The typical use of thie function is as a parameter to an Array's sort() method, such as:\n *      let z = ['File-10', 'File-12', 'File-20', 'File-2', 'File-21', 'File-100', 'File-99', 'File-1'];\n *      z.sort()                       --> [\"File-1\", \"File-10\", \"File-100\", \"File-12\", \"File-2\", \"File-20\", \"File-21\", \"File-99\"]\n *      z.sort(psUtils.naturalCompare) --> [\"File-1\", \"File-2\", \"File-10\", \"File-12\", \"File-20\", \"File-21\", \"File-99\", \"File-100\"]\n *\n * NOTE: There is a known issue where sorting a simple array that contain undefined values, these values are never passed into the compare function by the browser.\n *       This results in the undefined values always appearing last after the sort.  One work-around is to have the values in an object, and the array contains the objects.\n *\n * @param a The first value to compare\n * @param b The second value to compare\n * @see naturalCompareOptions for configuration options\n */\nlet naturalCompare = function (a: any, b: any): number {\n  if (this.key != null) {\n    a = a[this.key];\n    b = b[this.key];\n  }\n\n  let alphabet = this.alphabet;\n  let ignoreCase = this.isIgnoreCase;\n  let isAscending = this.isAscending;\n  let result: number;\n  let i;\n  let codeA;\n  let codeB = 1;\n  let posA = 0;\n  let posB = 0;\n  let getCode = (str, pos, code?) => {\n    if (code) {\n      for (i = pos; code = getCode(str, i), code < 76 && code > 65; ) {\n        ++i;\n      }\n      return parseInt(str.slice(pos - 1, i), 10);\n    }\n    code = alphabet && alphabet.indexOf(str.charAt(pos));\n    return (hasValue(code) && code > -1) ? code + 76 : ((code = str.charCodeAt(pos) || 0), code < 45 || code > 127) ? code\n      : code < 46 ? 65          // -\n      : code < 48 ? code - 1\n      : code < 58 ? code + 18   // 0-9\n      : code < 65 ? code - 11\n      : code < 91 ? code + 11   // A-Z\n      : code < 97 ? code - 37\n      : code < 123 ? code + 5   // a-z\n      : code - 63;\n  };\n  let isPseudoNullA = false;\n  let isPseudoNullB = false;\n  if (this.emptyAsNull) {\n    isPseudoNullA = (a != null && !hasValue(a));\n    isPseudoNullB = (b != null && !hasValue(b));\n  }\n  if (a == null || b == null || isPseudoNullA || isPseudoNullB) {\n    let nulls = this.nulls;\n    if ((a === undefined && b === undefined) || (a === null && b === null)) {\n      result = 0;\n    } else if (a === undefined) {\n      result = ((b === null || isPseudoNullB) ? -1 :\n          nulls === 'first' ? -1 :\n            nulls === 'last' ? 1 :\n              nulls === 'desc' ? (isAscending ? 1 : -1) :\n                /* default */                   (isAscending ? -1 : 1)\n      );\n    } else if (b === undefined) {\n      result = ((a === null || isPseudoNullA) ? 1 :\n          nulls === 'first' ? 1 :\n            nulls === 'last' ? -1 :\n              nulls === 'desc' ? (isAscending ? -1 : 1) :\n                /* default */                   (isAscending ? 1 : -1)\n      );\n    } else if (isPseudoNullA && isPseudoNullB) {\n      result = a.localeCompare(b);\n    } else if (a === null || isPseudoNullA) {\n      result = (b === null ? 1 :\n          isPseudoNullB ? -1 :\n            nulls === 'first' ? -1 :\n              nulls === 'last' ? 1 :\n                nulls === 'desc' ? (isAscending ? 1 : -1) :\n                  /* default */       (isAscending ? -1 : 1)\n      );\n    } else {\n      result = (nulls === 'first' ? 1 :\n          nulls === 'last' ? -1 :\n            nulls === 'desc' ? (isAscending ? -1 : 1) :\n              /* default */       (isAscending ? 1 : -1)\n      );\n    }\n    return result;\n  }\n\n  // convert date to number\n  if (a instanceof Date && b instanceof Date) {\n    a = a.getTime();\n    b = b.getTime();\n  } else {\n    // convert string A to number?\n    if (typeof a === 'string') {\n      let numA = parseFloat(a);\n      if (!isNaN(numA)) {\n        // coercion needed here\n        if (a === String(numA) && a.length === numA.toString().length) {\n          a = numA;\n        }\n      }\n    }\n    // convert string B to number?\n    if (typeof b === 'string') {\n      let numB = parseFloat(b);\n      if (!isNaN(numB)) {\n        // coercion needed here\n        if (b === String(numB) && b.length === numB.toString().length) {\n          b = numB;\n        }\n      }\n    }\n  }\n\n  if (typeof a === 'number' && typeof b === 'number') {\n    result = (a === b ? 0 : (a < b) ? -1 : 1);\n    if (!isAscending) {\n      result *= -1;\n    }\n    return result;\n  } else {\n    // using coercion below to handle identity instead of equality (comparing integers to strings)\n    a += '';\n    b += '';\n    if (a !== b) {\n      if (ignoreCase) {\n        a = a.toLowerCase();\n        b = b.toLowerCase();\n      }\n      for ( ; codeB; ) {\n        codeA = getCode(a, posA++);\n        codeB = getCode(b, posB++);\n        if (codeA < 76 && codeB < 76 && codeA > 66 && codeB > 66) {\n          codeA = getCode(a, posA, posA);\n          codeB = getCode(b, posB, posA = i);\n          posB = i;\n        }\n        if (codeA !== codeB) {\n          result = (codeA < codeB) ? -1 : 1;\n          if (!isAscending) {\n            result *= -1;\n          }\n          return result;\n        }\n      }\n    }\n    return 0;\n  }\n};\n\n/**\n * A configuration object to be used with naturalCompare.  Available options are:\n *      alphabet (String) an optional String containing the full list of characters, in the desired order.\n *          Estonian - \"ABDEFGHIJKLMNOPRSŠZŽTUVÕÄÖÜXYabdefghijklmnoprsšzžtuvõäöüxy\"\n *          Russian  - \"АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя\"\n *      emptyAsNull  (boolean) a flag to indicate blank (or only white-space) values will be treated as null\n *      isAscending  (boolean) a flag to indicate if the sort should be in ascending order\n *      isIgnoreCase (boolean) a flag to indicate if the case of the letters should be ignored\n *      nulls (String) - how to handle undefined and null values in the sort order (undefined values are always before null values) - defaults to 'asc'\n *          first - null values are always first\n *          last  - null values are always last\n *          asc   - null values are first for ascending order and last for descending order (default)\n *          desc  - null values are last for ascending order and first for descending order\n */\nexport class PdsNaturalSort {\n\n  //Assigned in constructor so it is bound to this object.\n  naturalCompare: (a: any, b: any) => number;\n\n  alphabet: string | null = null;\n  emptyAsNull: boolean = false;\n  isAscending: boolean = true;\n  isIgnoreCase: boolean = false;\n  key: string | null = null;\n  nulls: string = 'asc';\n\n  constructor() {\n    this.naturalCompare = naturalCompare.bind(this);\n  }\n\n  clearKey(): void {\n    this.key = null;\n  }\n\n  setAlphabet(str: string): void {\n    this.alphabet = (hasValue(str) ? str : null);\n  }\n\n  setAscending(value: boolean): void {\n    this.isAscending = value;\n  }\n\n  setEmptyAsNull(value: boolean): void {\n    this.emptyAsNull = value;\n  }\n\n  setIgnoreCase(value: boolean): void {\n    this.isIgnoreCase = value;\n  }\n\n  setKey(value: string): void {\n    this.key = value;\n    if (value == null) {\n      console.warn('Invalid value for natural compare key: ', value);\n    }\n  }\n\n  setNulls(value): void {\n    if (value == null || typeof value !== 'string') {\n      value = 'asc';\n    }\n    value = value.toLowerCase();\n    this.nulls = (value === 'desc' || value === 'first' || value === 'last' ? value : 'asc');\n  }\n\n  ascending(): void {\n    this.isAscending = true;\n  }\n\n  descending(): void {\n    this.isAscending = false;\n  }\n\n  ignoreCase(): void {\n    this.isIgnoreCase = true;\n  }\n\n  nullsAsc(): void {\n    this.nulls = 'asc';\n  }\n\n  nullsDesc(): void {\n    this.nulls = 'desc';\n  }\n\n  nullsFirst(): void {\n    this.nulls = 'first';\n  }\n\n  nullsLast(): void {\n    this.nulls = 'last';\n  }\n\n  useCase(): void {\n    this.isIgnoreCase = false;\n  }\n\n  reset(): void {\n    this.alphabet = null;\n    this.emptyAsNull = false;\n    this.isAscending = true;\n    this.isIgnoreCase = false;\n    this.nulls = 'asc';\n    this.clearKey();\n  }\n\n  /**\n   * Sorts an array containing JavaScript objects, returning a new instance of the array sorted on the specified (nested) key.\n   * Notes:\n   *    The key cannot be nested within other objects (top-level).\n   *    If \"arr\" is not an array, it will be returned.\n   * @param arr The array to be sorted\n   * @param key The name of the key within the object\n   */\n  naturalSort(arr: Array<any>, key: string): Array<any> {\n    let result;\n    if (arr instanceof Array) {\n      let hasObject = false;\n      let hasPrimitive = false;\n      arr.forEach((o) => {\n        if (o != null && typeof o === 'object') {\n          hasObject = true;\n        } else {\n          hasPrimitive = true;\n        }\n      });\n      if (hasObject && !hasPrimitive) {\n        this.setKey(key);\n        result = arr.sort(this.naturalCompare);\n      } else if (!hasObject && hasPrimitive) {\n        //arr.slice() clones the array.\n        result = arr.slice().sort(this.naturalCompare);\n      } else if (!hasObject && !hasPrimitive) {\n        result = arr;\n      } else {\n        throw 'Unable to sort an array containing both primitives and objects.';\n      }\n    } else {\n      result = arr;\n    }\n    return result;\n  }\n}\n"]}