{"version":3,"sources":["pds-library/src/PdsNumberedSlider.ts"],"names":[],"mappings":"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","file":"PdsNumberedSlider.js","sourcesContent":["import {PdsWidget} from './PdsWidget';\nexport class PdsNumberedSlider extends PdsWidget {\n  is = 'pds-numbered-slider';\n\n  value: number;\n  max: number;\n\n  properties = {\n    min: Number,\n    max: {\n      type: Number,\n      observer: 'maxChanged'\n    },\n    value: {\n      type: Number,\n      observer: 'valueChanged'\n    },\n    name: String  //we construct the input id using this name.\n  };\n\n  //Get and Set modelValue are here for Angular2 to interact with.\n  set modelValue(value: number) {\n    if (typeof value === 'string') {\n      value = parseInt(String(value));\n    }\n\n    this.value = value;\n    this.querySelector('input').value = value;\n  }\n\n  get modelValue(): number {\n    return this.value;\n  }\n\n  //Called by the observer.\n  valueChanged(value): void {\n    this.querySelector('input').value = this.value;\n    this.updateNumber();\n  }\n\n  //Called by the observer.\n  maxChanged(max): void {\n    this.querySelector('input').setAttribute('max', this.max);\n    this.updateNumber();\n  }\n\n  attributeChanged(name: string, type: any): void {\n    if (this.properties.hasOwnProperty(name)) {\n      //Push the attributes right down onto the input.\n      this.querySelector('input').setAttribute(name, this[name]);\n    }\n  }\n\n  ready(): void {\n    let input: HTMLElement = this.querySelector('input');\n    input.setAttribute('min', (<any>this).getAttribute('min'));\n    input.setAttribute('max', (<any>this).getAttribute('max'));\n    input.setAttribute('value', this.value || (<any>this).getAttribute('value'));\n\n    let updateValueAndDispatchModelValueChange = function (event): void {\n      //Save the finalized input value to the PdsNumberedSlider property\n      this.value = parseInt(event.target.value);\n\n      let e: Event = new Event('modelValueChange');\n      this.dispatchEvent(e);\n    };\n\n    //We need the mouseup, touchend, and keyup listeners to deliver changes to whoever is listening.\n    input.addEventListener('mouseup', updateValueAndDispatchModelValueChange.bind(this));\n    input.addEventListener('touchend', updateValueAndDispatchModelValueChange.bind(this));\n    input.addEventListener('keyup', updateValueAndDispatchModelValueChange.bind(this));\n\n    //We need two listeners here to keep track of what the value of the input is because\n    //IE, FireFox, and Chrome implement the change events differently.\n    input.addEventListener('input', this.updateNumber.bind(this));\n    input.addEventListener('change', this.updateNumber.bind(this));\n  }\n\n  updateNumber = function (): void {\n    let input: HTMLElement = this.querySelector('input');\n    let i = 0;\n    let currentPage = parseInt((<any>input).value);\n    let dotLabel = this.querySelector('span.pds-dot-label');\n    let dotBackground = this.querySelector('span.pds-dot-background');\n    let max = parseInt(this.max);\n    let min = parseInt(this.min);\n    let totalPages = max - min;\n\n    let offset = 34 * (currentPage - min) / totalPages;\n    let position = 100 * (currentPage - min) / totalPages;\n\n    let positionStyle = 'calc(' + position + '% - ' + offset + 'px)';\n\n    //May no one ever have to debug through this awful piece of code. The designers made me do it.\n    dotBackground.style.left = positionStyle;\n    dotLabel.style.left = positionStyle;\n    dotLabel.innerText = currentPage;\n  };\n\n  messageKeysUpdated(): void {\n    //no op since there are no keys here.\n  }\n}\n"]}