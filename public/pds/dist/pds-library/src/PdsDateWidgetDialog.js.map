{"version":3,"sources":["pds-library/src/PdsDateWidgetDialog.ts"],"names":[],"mappings":"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","file":"PdsDateWidgetDialog.js","sourcesContent":["import {PdsWidget} from './PdsWidget';\nimport {CalendarDay} from './interfaces/calendar-day';\nexport class PdsDateWidgetDialog extends PdsWidget {\n\n  is: string = 'pds-date-picker-dialog';\n\n  monthLabels: Array<{value: string, text: string}>;\n  pds: any;\n  dayLabels: Array<string>;\n  todayTimeStamp: number;\n  dataMaxdate: string;\n  maxDateTimeStamp: number;\n  dataMindate: string;\n  minDateTimeStamp: number;\n  value: Date;\n\n  //One object per day in the current month.\n  days: Array<CalendarDay>;\n\n  month: string;\n  year: string;\n\n  holdRefresh: boolean = false;\n  possibleYears: Array<{value: string, text: string}>;\n\n  //TODO search the code to see if this is actually being used.\n  yearIncrement: boolean;\n\n  properties = {\n    month: {\n      type: String,\n      observer: 'monthChange'\n    },\n    year: {\n      type: String,  //TODO update the rest of the page to use strings for year and month.\n      observer: 'yearChange'\n    },\n    possibleYears: {\n      type: Array\n    },\n    dataMaxdate: {\n      type: String\n    },\n    dataMindate: {\n      type: String\n    }\n  };\n\n  setMonthLabels(): void {\n    //when created, we need to generate the days to iterate over.\n    let monthLabels: Array<{value: string, text: string}> = [];\n    this.pds.i18n.locale.DATETIME_FORMATS.SHORTMONTH.forEach((month, index) => {\n      let textValueObj = {\n        value: String(index),\n        text: month\n      };\n      monthLabels.push(textValueObj);\n    });\n    this.monthLabels = monthLabels;\n  }\n\n  ready(): void {\n    super.ready();\n\n    this.setMonthLabels();\n\n    this.dayLabels = this.pds.i18n.locale.DATETIME_FORMATS.SHORTDAY;\n\n    let today = new Date();\n    today.setHours(0);\n    today.setMinutes(0);\n    today.setSeconds(0);\n    today.setMilliseconds(0);\n    this.todayTimeStamp = today.getTime();\n\n    if (this.dataMaxdate != null) {\n      this.maxDateTimeStamp = (new Date(this.dataMaxdate)).getTime();\n    }\n    if (this.dataMindate != null) {\n      this.minDateTimeStamp = (new Date(this.dataMindate)).getTime();\n    }\n\n    let d;\n    if (this.value != null) {\n      d = this.value;\n    } else {\n      d = today;\n    }\n\n    this.holdRefresh = true;\n    this.month = String(d.getMonth());\n    this.holdRefresh = false;\n    this.year = String(d.getFullYear());\n  }\n\n  // Functions left in to help remember which life cycle hooks are available.\n  // created() {\n  //   console.log('dialog created');\n  // }\n  //\n  // attached() {\n  //   console.log('dialog attached');\n  // }\n  //\n  // detached() {\n  //   console.log('dialog detached');\n  // }\n\n  //0-11 for index\n  getSelectedMonth(index): boolean {\n    return String(index) === this.month;\n  }\n\n  getSelectedYear(yearValue): boolean {\n    return String(yearValue) === String(this.year);\n  }\n\n  getSelectedDateClass(dateTimeStamp, value): string | undefined {\n    if (value != null && value.getTime() === dateTimeStamp) {\n      return 'pds-selected-day';\n    }\n  }\n\n  getTodayClass(dateTimeStamp): string | undefined {\n    if (dateTimeStamp != null && dateTimeStamp === this.todayTimeStamp) {\n      return 'pds-date-picker-today';\n    }\n  }\n\n  getIsWeekendClass(isWeekend): string | undefined {\n    if (isWeekend === true) {\n      return 'pds-weekend-day';\n    }\n  }\n\n  getInvisibleClass(dayNum): string | undefined {\n    if (dayNum == null) {\n      return 'pds-invisible';\n    }\n  }\n\n  getDisabledItemClass(dateTimeStamp): string | undefined {\n    if (this.isTimeStampDisabled(dateTimeStamp)) {\n      return 'pds-disabled-day';\n    }\n  }\n\n  isTimeStampDisabled(dateTimeStamp): boolean {\n    if (dateTimeStamp != null) {\n      if (this.maxDateTimeStamp != null && this.maxDateTimeStamp < dateTimeStamp) {\n        return true;\n      }\n\n      if (this.minDateTimeStamp != null && this.minDateTimeStamp > dateTimeStamp) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  selectDate(event): void {\n    let dateTimeAttr = event.target.getAttribute('data-date-time');\n    let dateTimeStamp = new Date(parseInt(dateTimeAttr));\n\n    if (this.isTimeStampDisabled(dateTimeStamp)) {\n      return;\n    }\n\n    this.value = dateTimeStamp;\n\n    //The value changed. Fire a valueChange event.\n    let e = new Event('pds-date-change-event');\n    (<any>this).dispatchEvent(e);\n  }\n\n  monthChange(): void {\n    if (this.month != null && this.holdRefresh !== true) {\n      this.updateDays();\n    }\n  }\n\n  yearChange(): void {\n    this.updateAvailableYears(this.year);\n    this.updateDays();\n  }\n\n  updateAvailableYears(year): void {\n    let newYears: Array<{value: string, text: string}> = [];\n    for (let i = 0; i < 21; i++) {\n      let val: string = String(year - 10 + i);\n      newYears.push({value: val, text: val});\n    }\n    this.possibleYears = newYears;\n  }\n\n  previousMonth(): void {\n    if (this.month === '0') {\n      this.holdRefresh = true;\n      this.month = '11';\n      this.holdRefresh = false;\n      this.year = String(parseInt(this.year) - 1);\n    } else {\n      this.month = String(parseInt(this.month) - 1);\n    }\n  }\n\n  nextMonth(): void {\n    if (this.month === '11') {\n      this.holdRefresh = true;\n      this.month = '0';\n      this.holdRefresh = false;\n      this.yearIncrement = true;\n      this.year = String(parseInt(this.year) + 1);\n      this.yearIncrement = false;\n    } else {\n      this.month = String(parseInt(this.month) + 1);\n    }\n  }\n\n  setDate(dateTimeString): void {\n    this.value = new Date(dateTimeString);\n    this.updateDays();\n  }\n\n  updateDays(): void {\n    this.days = this.pds.utils.generateDays(parseInt(this.year), parseInt(this.month));\n  }\n\n  messageKeysUpdated(): void {\n    this.dayLabels = this.pds.i18n.locale.DATETIME_FORMATS.SHORTDAY;\n\n    this.setMonthLabels();\n  }\n}\n"]}