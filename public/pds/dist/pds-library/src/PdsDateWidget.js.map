{"version":3,"sources":["pds-library/src/PdsDateWidget.ts"],"names":[],"mappings":"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","file":"PdsDateWidget.js","sourcesContent":["import {PdsAbstractInputWidget} from './PdsAbstractInputWidget';\n\nexport class PdsDateWidget extends PdsAbstractInputWidget {\n  is = 'pds-date-widget';\n\n  name: string;\n\n  dataMaxdate: string;\n  dataMindate: string;\n  dataMaxdate_exclusive: string;\n  dataMindate_exclusive: string;\n\n  buttonText: string;\n\n  // properties = {\n  //   dataMaxdate: String,\n  //   dataMindate: String,\n  //   dataMaxdate_exclusive: String,\n  //   dataMindate_exclusive: String,\n  //   name: String\n  // };\n\n  properties = {\n    name: String,                   //works\n    dataLabelText: String,          //works\n    dataBadgeText: String,\n    dataHelperText: String,\n    dataRegexErrorText: String,\n    dataFieldHelpText: String,\n    dataPlaceholderText: String,\n    dataTooltipText: String,\n    dataIsrequired: {\n      type: Boolean,\n      value: false,\n      observer: 'setRequired',\n      notify: true\n    },\n    dataIsreadonly: {\n      type: Boolean,\n      value: false,\n      observer: 'setReadonly',\n      notify: true\n    },\n    hasHadError: {\n      value: false,\n      observer: 'setShowErrorMessage'\n    },\n    dataMaxdate: String,\n    dataMindate: String,\n    dataMaxdate_exclusive: String,\n    dataMindate_exclusive: String\n  };\n\n  dialogValue: Date;\n  showDatePickerDialog: boolean = false;\n\n  ready(): void {\n    this.messageKeysUpdated();\n  }\n\n  messageKeysUpdated(): void {\n    this.buttonText = this.pds.i18n.getText(this.pds.i18n.widgetKeys['dateWidget.open_picker_dialog']);\n  }\n\n  dateChanged(e): void {\n    //Although we could directly set the modelValue, setting the value as the user would\n    //and then calling inputChange goes through the same path that things go through when the user types in dates which\n    //should be more maintanable.\n    this.value = this.pds.i18n.localizeDate(e.target.value);\n    this.inputChange();\n    this.closeDatePickerDialog();\n  };\n\n  setValue(value, skip = false): void {\n    if (value == null) {\n      value = '';\n    }\n    let inputEl = this.querySelector('input');\n    if (inputEl != null && value !== inputEl.value) {\n      inputEl.value = value;\n    }\n    if (skip !== true) {\n      this.setModelValue(this.pds.i18n.deLocalizeDate(value), true);\n    }\n  };\n\n  /**\n   * @param modelValue\n   * @param skip\n   * @returns returns if the model value was actually set.\n   */\n  setModelValue(modelValue: Date, skip = false): boolean {\n    let ele = this.querySelector('input');\n    if (ele != null && modelValue !== ele.modelValue) {\n      ele.modelValue = modelValue;\n      this.dialogValue = modelValue;\n      if (skip !== true) {\n        this.setValue(this.pds.i18n.localizeDate(modelValue), true);\n      }\n      return true;\n    }\n    return false;\n  };\n\n  openDatePickerDialog(): void {\n    this.showDatePickerDialog = true;\n  };\n\n  closeDatePickerDialog(): void {\n    this.showDatePickerDialog = false;\n  };\n\n  isValidDate(): boolean {\n    return this.pds.i18n.isValidDate(this.value);\n  };\n\n  validateWidget(): boolean {\n//                    datePreValidate(jQueryElement);\n\n    if (this.value == null || this.value === '') {\n      //TODO - make this thing handle the required rule.\n      //short-circuit validation when value is empty\n//                        if (jQueryElement.hasClass(\"required\")) {\n//                            //we only care about empty values when the field is required\n//                            let ok = psRequired.validateRequired(jQueryElement);\n//                            // if there were any errors, clear out the maxdate & mindate refs\n//                            onErrorClearMinMaxDateReferences(jQueryElement);\n//                            datePostValidate(jQueryElement);\n//                            return ok;\n//                        } else {\n//                            //else the field is empty and it's not required... no other date things to check\n//                            clearError(jQueryElement);\n//                            //check if any special validations to run\n//                            let specialValidationResults = psSpecial.validateSpecial(jQueryElement);\n//                            // if there were any errors, clear out the maxdate & mindate refs\n//                            onErrorClearMinMaxDateReferences(jQueryElement);\n//                            datePostValidate(jQueryElement);\n//                            return specialValidationResults;\n//                        }\n\n    }\n    //if not empty - do the more interesting validations\n\n    //check the date entry for validity\n    let inputIsValid: boolean = this.isValidDate();\n    let passedMin = true;\n    let passedMax = true;\n\n    if (inputIsValid) {\n      //Gets the modelValue set in the input.\n      this.setValue(this.value);\n      if (this.dataMindate != null) {\n        let minDateObj = new Date(this.dataMindate);\n        let exclusiveMin = this.dataMindate_exclusive;\n        passedMin = this.validateValueAfterMin(this.pds.utils.dateToTime(this.modelValue), this.pds.utils.dateToTime(minDateObj), exclusiveMin);\n        if (!passedMin) {\n          let errorMsg;\n          if (exclusiveMin == null) {\n            errorMsg = this.pds.i18n.getText(this.pds.i18n.widgetKeys['dateWidget.failedMinDate'], this.pds.i18n.localizeDate(minDateObj));\n          } else {\n            errorMsg = this.pds.i18n.getText(this.pds.i18n.widgetKeys['dateWidget.failedMinDateExclusive'], this.pds.i18n.localizeDate(minDateObj));\n          }\n\n          this.setError(errorMsg);\n          inputIsValid = false;\n        }\n      }\n\n      if (this.dataMaxdate != null) {\n        let maxDateObj = new Date(this.dataMaxdate);\n        let exclusiveMax = this.dataMaxdate_exclusive;\n        passedMax = this.validateValueBeforeMax(this.pds.utils.dateToTime(this.modelValue), this.pds.utils.dateToTime(maxDateObj), exclusiveMax);\n        if (!passedMax) {\n          let errorMsg;\n          if (exclusiveMax == null) {\n            errorMsg = this.pds.i18n.getText(this.pds.i18n.widgetKeys['dateWidget.failedMaxDate'], this.pds.i18n.localizeDate(maxDateObj));\n          } else {\n            errorMsg = this.pds.i18n.getText(this.pds.i18n.widgetKeys['dateWidget.failedMaxDateExclusive'], this.pds.i18n.localizeDate(maxDateObj));\n          }\n\n          this.setError(errorMsg);\n          inputIsValid = false;\n        }\n      }\n\n      //TODO - Don't forget about zero dates.  We will want to do them as a custom function of this for PowerSchool.\n    } else {\n      let errorMsg = this.pds.i18n.getText(this.pds.i18n.widgetKeys['dateWidget.invalidDate']);\n      this.setError(errorMsg);\n    }\n    if (inputIsValid) {\n      this.clearError();\n      //TODO - special validation functions need to be registered with the powerSchoolDesignSystemToolkit library.\n      //inputIsValid = psSpecial.validateSpecial(jQueryElement);\n    }\n    // if there were any errors, clear out the maxdate & mindate refs\n    //onErrorClearMinMaxDateReferences(jQueryElement);\n    //datePostValidate(jQueryElement);\n    // this.isValid = inputIsValid;\n    return inputIsValid;\n  }\n}\n"]}