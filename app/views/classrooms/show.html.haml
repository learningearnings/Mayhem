%h2 Classroom: #{@classroom.name}
%ul.action_buttons
  - unless @classroom.sti_id
    %li= button_to "Delete classroom", classroom_path(@classroom), confirm: classroom_delete_confirmation_message, method: :delete, class: 'btn awesome-button'
    %li= link_to "Edit classroom", edit_classroom_path(@classroom), class: 'btn awesome-button'

- if @classroom.sti_id
  .classrooms-alert.alert.alert-warning
    You must log into iNow to manage this classroom.

%p
  Please Note:
%p
  You can only add students from your school that have already been added to
  Learning Earnings. If you need to add or upload students for your school visit
  the #{link_to("Students", teachers_bulk_students_path)} page.

%table#classroom-students.table.table-bordered.table-striped.solid-background
  %thead
    %tr
      %th Student Name
      %th Homeroom?
      %th Username
      %th Actions
  %tbody
    - @classroom.students.order("last_name, first_name").each do |student|
      %tr
        %td= link_to student.name, teachers_show_student_path(student, :classroom_id => @classroom.id)
        %td= student.homeroom == @classroom ? "Yes" : "No"
        %td= link_to student.user.username, teachers_show_student_path(student, :classroom_id => @classroom.id)
        %td
          - unless @classroom.sti_id
            = link_to 'Remove', remove_classroom_student_path(:classroom => @classroom, :student => student)

- unless @classroom.sti_id
  .btn.btn-success.add-existing-student
    Add Existing Student
  OR
  .btn.btn-success.add-new-student
    Add New Student

#add-new-student-modal.modal.hide
  .modal-header
    %h3 Add New Student
  .modal-body
    = form_for :student, html: { class: 'add-new-student' }, url: '/create_classroom_student' do |f|
      = hidden_field_tag :classroom_id, @classroom.id
      = f.label :first_name
      = f.text_field :first_name
      = f.label :last_name
      = f.text_field :last_name
      = f.label :username
      = f.text_field :username
      = f.label :grade
      =# f.select :grade, (current_school.min_grade..current_school.max_grade)
      = f.select :grade, %w( K 1 2 3 4 5 6 7 8 9 10 11 12 )
      = f.label :password
      = f.text_field :password
    .btn.btn-success.add-new-student-save
      Add
    .btn.btn-danger.cancel-modal
      Cancel

#add-existing-student-modal.modal.hide
  .modal-header
    %h3 Add Existing Student
  .modal-body
    = form_for PersonSchoolClassroomLink.new, html: { class: 'add-existing-student' }, url: new_classroom_student_path do |f|
      = select_tag :student_id, options_from_collection_for_select((current_school.students.all.sort_by{|x| x.name} - @classroom.students), :id, :to_s), :class => 'chzn-select'
      %label.checkbox
        = check_box_tag :homeroom
        Set as homeroom?
      = hidden_field_tag :classroom_id, @classroom.id
    .btn.btn-success.add-existing-student-save
      Add
    .btn.btn-danger.cancel-modal
      Cancel

%script#students{ type: 'text/html' }
  :plain
    {{#students}}
      <tr>
        <td><a href="/teachers/show_student/{{id}}?classroom_id={{classroom_id}}">{{first_name}} {{last_name}}</a></td>
        <td>{{is_homeroom}}</td>
        <td><a href="/teachers/show_student/{{id}}?classroom_id={{classroom_id}}">{{username}}</a></td>
        <td><a href="/remove_classroom_student?classroom={{classroom_id}}&student={{id}}">Remove</a></td>
      </tr>
    {{/students}}

= javascript_include_tag "tours/school_admin/overview"
= javascript_include_tag "tours/teacher/overview"

:javascript
  $(".chzn-select").chosen();

  if (hopscotch.getState() !== null) {
    var tour = window[hopscotch.getState().split(":")[0]];
    hopscotch.startTour(tour);
  }

  $('.btn.add-existing-student').click(function(e) {
    e.preventDefault();
    $('#add-existing-student-modal').modal('show');
  });

  $('.btn.add-new-student').click(function(e) {
    e.preventDefault();
    $('#add-new-student-modal').modal('show');
  });

  $('.add-new-student-save').click(function(e) {
    e.preventDefault();

    var form = $('form.add-new-student');
    var values = form.serialize();
    $.ajax({
      type: "POST",
      url : form.attr('action'),
      data: values,
      dataType: 'json'
    }).success(function(json) {
      reloadTable(json);
      $('.modal').modal('hide');

      if (hopscotch.getState() !== "undefined") {
        hopscotch.nextStep();
      }
    });
  });

  $('.add-existing-student-save').click(function(e) {
    e.preventDefault();
    var form = $('form.add-existing-student');
    var values = form.serialize();
    $.ajax({
      type: "POST",
      url: form.attr('action'),
      data: values,
      dataType: 'json'
    }).success(function(json) {
      reloadTable(json);
      $('.modal').modal('hide');
    });
  });

  function reloadTable(students) {
    ich.grabTemplates();
    var html = ich.students({students: students});
    $('#classroom-students tbody').html(html);
  }

  $('.cancel-modal').click(function(e) {
    e.preventDefault();
    $('.modal').modal('hide');
  });

  function homeroom_check(classroom_id) {
    var student_id = $('.chzn-select').val();
    var student = 'student_id='+student_id;
    var classroom = '&classroom_id='+classroom_id;
    var url =  '/homeroom_check?'+student+classroom;

    $.ajax({
      url: url,
      type: 'GET',
      dataType: "json",
      success: function(data){
        if(data.classroom == null) {
          change_homeroom(student_id, classroom_id);
        } else {
          classroom = data.classroom.classroom
          if(confirm("Are you sure you want to change student homeroom from " + classroom.name + "?")) {
            change_homeroom(student_id, classroom_id);
          } else {
            alert('No change was made.');
          }
        }
      }
    });
  }

  function change_homeroom(student_id, classroom_id) {
    var student = 'student_id='+student_id;
    var classroom = '&classroom_id='+classroom_id;
    var homeroom = document.getElementById('homeroom').checked;

    var url =  '/add_classroom_student?'+student+classroom+'&homeroom='+homeroom;
    $.ajax({
      url: url,
      type: 'GET',
      dataType: "json",
      success: function(data){
        window.location.replace("/classrooms/" + classroom_id);
      }
    });
  }
