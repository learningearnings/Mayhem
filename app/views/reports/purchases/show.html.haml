.main-content-wrapper
  .primary-content-fw

    - if report.state == "complete"
      %h2 Purchases Report
      - report_params = Reports::Purchases.new(params.merge(school: current_school)).parameters
      = simple_form_for report_params,  :url => purchases_report_path, method: :post, :html => {:class => 'form-horizontal noprint'} do |f|
        .form-sections
          .filter
            %h4 Filter By
            .filter-dates
              = f.input :date_filter, :label => "Date Range", :collection => report_params.date_filter_options
            .filter-rewards
              = f.input :reward_status_filter,:label => "Show Rewards", :collection => report_params.reward_status_filter_options
            .filter-teachers
              = f.input :teachers_filter, :label => "Show Teachers", :collection => report_params.teachers_filter_options(current_school)
          .sorting
            %h4 Options
            .filter-dates
              = f.input :students_name_option, :label => "Student Name Options", :collection => report_params.student_name_options, :include_blank => false
            .filter-dates
              = f.input :teachers_name_option, :label => "Teachers Name Options", :collection => report_params.teacher_name_options, :include_blank => false
            %br/
          = f.submit 'Run Report', :class => 'awesome-button'
          = button_to_function "Print Report", "window.print();", class: "noprint awesome-button"
          = link_to "Export Report", export_report_path(DelayedReport.find(params[:id])) , :class => 'btn awesome-button'

      .report
        = form_tag DeliverRewardsCommand.new, method: :post do
          %p The report can be sorted using the arrows in the heading of the report results. To sort by more than 1 column, sort the first column and then hold shift when clicking the second column. You can also search your report to find something or someone in particular using the search box below.
          %table#report_table.table.table-bordered.table-striped.solid-background
            %thead
              %tr
                - enable_mark_button = false
                %th Delivery Teacher
                %th Student (username)
                %th Classroom
                %th Grade
                %th Purchased
                %th Reward
                %th Quantity
                %th Status
                %th Refund
                %th Deliver
                %th= check_box_tag "reward_deliveries_all", '1', false, :id => 'toggle', :onclick => "toggleAll(this)"
            %tbody
              - report_data = JSON.parse(report.report_data)
              - report_data.each do |row|
                %tr
                  %td= row["delivery_teacher"]
                  %td= row["student"]
                  %td= row["classroom"]
                  %td= row["grade"]
                  %td= row["purchased"]
                  %td= row["reward"]
                  %td= row["quantity"]
                  %td= row["status"]
                  %td
                    - if row["delivery_status"] == 'pending'
                      = link_to "Refund", refund_purchase_path(reward_delivery_id: row["reward_delivery_id"]), :confirm => "Are you sure you want to refund this purchase?", :class => "button"
                  %td
                    - if row["delivery_status"] == 'pending'
                      - enable_mark_button = true
                      = check_box_tag "reward_deliveries[]", row["reward_delivery_id"]
                  %td

          = simple_fields_for report_params do |p|
            = p.input :date_filter, :as => :hidden
            = p.input :reward_status_filter, :as => :hidden
            = p.input :teachers_filter, :as => :hidden
            = p.input :sort_by, :as => :hidden

          - if enable_mark_button
            %br/
            = submit_tag 'Mark Rewards Delivered', :class => "awesome-button noprint"
    - else 
      .message.center-content
        = image_tag "loading.gif"
        %h3 Your purchase report is currently processing, it will show up here when it is completed.
      :javascript
        setTimeout(checkReportStatus, 1000);

        function checkReportStatus() {
          $.get(window.location.pathname + ".json",function(data) {
            if (data.delayed_report.state == "complete") {
              loadReport();
            } else {
              setTimeout(checkReportStatus, 1000);
            }
          });
        }

        function loadReport() {
          location.reload();
        }

:javascript
  $(document).ready( function () {
    $('#report_table').dataTable( {
      "aoColumnDefs": [
        { 'bSortable': false, 'aTargets': [ 8, 9, 10 ] }
       ],
      "bPaginate": false,
      "bInfo": false
    } );
  } );
:plain
  <script type="text/javascript">
    function toggleAll(name) {
      if(name.checked) {
        $("input:checkbox").each(function(){
          $(this).attr('checked', true);
          $("input:text").each(function(){
            $(this).attr('disabled', false);
          });
        });
      }
      else {
        $("input:checkbox").each(function(){
          $(this).attr('checked', false);
          $("input:text").each(function(){
            $(this).attr('disabled', true);
          });
        });
      }
    }
  </script>
